name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FORCE_COLOR: 1
  NODE_VERSION: '18.x'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint Solidity
        run: npm run lint:sol

      - name: Lint TypeScript
        run: npm run lint:ts

      - name: Check TypeScript compilation
        run: npm run typecheck

  build:
    name: Build Contracts
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Build TypeScript
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            artifacts/
            typechain-types/
            dist/

  test:
    name: Test Contracts
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npx hardhat test test/unit/**/*.test.ts

      - name: Run integration tests
        if: matrix.test-type == 'integration'
        run: npx hardhat test test/integration/**/*.test.ts
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Run coverage
        run: npm run coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  gas-report:
    name: Gas Report
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Generate gas report
        run: npm run gas-snapshot
        env:
          REPORT_GAS: true
          COINMARKETCAP_API_KEY: ${{ secrets.COINMARKETCAP_API_KEY }}

      - name: Upload gas report
        uses: actions/upload-artifact@v4
        with:
          name: gas-report
          path: gas-report.txt

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: build
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Slither
        run: |
          python3 -m pip install --upgrade pip
          pip3 install slither-analyzer

      - name: Run Slither
        run: |
          slither . --json slither-report.json || true

      - name: Upload Slither report
        uses: actions/upload-artifact@v4
        with:
          name: slither-report
          path: slither-report.json

  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test, coverage]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: testnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Sepolia
        run: npx hardhat run scripts/deploy/00_deploy_asiaflex.ts --network sepolia
        env:
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}

      - name: Verify contracts
        run: |
          # Read deployment addresses and verify
          if [ -f deployments/sepolia.json ]; then
            echo "Deployment found, attempting verification..."
            # Add verification commands here based on deployment output
          fi
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, coverage, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage/

      - name: Download gas report
        uses: actions/download-artifact@v4
        with:
          name: gas-report

      - name: Semantic Release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: release
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: mainnet
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Mainnet
        run: npx hardhat run scripts/deploy/00_deploy_asiaflex.ts --network mainnet
        env:
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}

      - name: Verify contracts on Etherscan
        run: |
          if [ -f deployments/mainnet.json ]; then
            echo "Mainnet deployment found, attempting verification..."
            # Add verification commands here
          fi
        env:
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}