name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  FORCE_COLOR: 3

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Hardhat compilers
        uses: actions/cache@v4
        with:
          path: ~/.cache/hardhat-nodejs/compilers
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.*') }}
          restore-keys: ${{ runner.os }}-hardhat-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run TypeScript lint
        run: npm run lint:ts
      
      - name: Run Solidity lint
        run: npm run lint:sol

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Cache Hardhat compilers
        uses: actions/cache@v4
        with:
          path: ~/.cache/hardhat-nodejs/compilers
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.*') }}
          restore-keys: ${{ runner.os }}-hardhat-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Compile contracts
        run: npx hardhat compile
      
      - name: Build TypeScript
        run: npm run build
      
      - name: TypeScript type check
        run: npm run typecheck

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Hardhat compilers
        uses: actions/cache@v4
        with:
          path: ~/.cache/hardhat-nodejs/compilers
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.*') }}
          restore-keys: ${{ runner.os }}-hardhat-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
        env:
          REPORT_GAS: true

  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Cache Hardhat compilers
        uses: actions/cache@v4
        with:
          path: ~/.cache/hardhat-nodejs/compilers
          key: ${{ runner.os }}-hardhat-${{ hashFiles('hardhat.config.*') }}
          restore-keys: ${{ runner.os }}-hardhat-
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run coverage
        run: npm run coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  slither:
    name: Slither static analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - uses: crytic/slither-action@v0.4.1
        with:
          target: .
          solc-version: "0.8.26"
          slither-args: "--config-file slither.config.json --solc-remaps @openzeppelin=node_modules/@openzeppelin"
          fail-on: high
      
      - name: Upload SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  gate:
    name: CI Gate
    runs-on: ubuntu-latest
    needs: [lint, build, test, coverage, slither]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "Lint: ${{ needs.lint.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Slither: ${{ needs.slither.result }}"
          
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.build.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.coverage.result }}" != "success" || \
                "${{ needs.slither.result }}" != "success" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          fi
          
          echo "✅ All CI jobs passed successfully"